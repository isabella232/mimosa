// Code generated by go-bindata.
// sources:
// providers/netscan/client/test_data/ips.json
// DO NOT EDIT!

package fixtures

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _providersNetscanClientTestDataIpsJSON = []byte(`[
  "192.168.0.50",
  "192.168.0.51",
  "192.168.0.52",
  "192.168.0.53",
  "192.168.0.54",
  "192.168.0.55",
  "192.168.0.56",
  "192.168.0.57",
  "192.168.0.58",
  "192.168.0.59",
  "192.168.0.60",
  "192.168.0.61",
  "192.168.0.62",
  "192.168.0.63",
  "192.168.0.64",
  "192.168.0.65",
  "192.168.0.66",
  "192.168.0.67",
  "192.168.0.68",
  "192.168.0.69",
  "77.75.79.30",
  "77.75.79.31",
  "77.75.79.32",
  "77.75.79.33",
  "77.75.79.34",
  "77.75.79.35",
  "77.75.79.36",
  "77.75.79.37",
  "77.75.79.38",
  "77.75.79.39",
  "77.75.79.40",
  "77.75.79.41",
  "77.75.79.42",
  "77.75.79.43",
  "77.75.79.44",
  "77.75.79.45",
  "77.75.79.46",
  "77.75.79.47",
  "77.75.79.48",
  "77.75.79.49",
  "77.75.79.50",
  "77.75.79.51",
  "77.75.79.52",
  "77.75.79.53",
  "77.75.79.54",
  "77.75.79.55",
  "77.75.79.56",
  "77.75.79.57",
  "77.75.79.58",
  "77.75.79.59"
]
`)

func providersNetscanClientTestDataIpsJSONBytes() ([]byte, error) {
	return _providersNetscanClientTestDataIpsJSON, nil
}

func providersNetscanClientTestDataIpsJSON() (*asset, error) {
	bytes, err := providersNetscanClientTestDataIpsJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "providers/netscan/client/test_data/ips.json", size: 873, mode: os.FileMode(420), modTime: time.Unix(1520259674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"providers/netscan/client/test_data/ips.json": providersNetscanClientTestDataIpsJSON,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"providers": &bintree{nil, map[string]*bintree{
		"netscan": &bintree{nil, map[string]*bintree{
			"client": &bintree{nil, map[string]*bintree{
				"test_data": &bintree{nil, map[string]*bintree{
					"ips.json": &bintree{providersNetscanClientTestDataIpsJSON, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
